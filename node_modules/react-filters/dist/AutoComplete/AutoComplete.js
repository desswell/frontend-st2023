'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _fuse = require('fuse.js');

var _fuse2 = _interopRequireDefault(_fuse);

var _autoBind = require('../utils/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _debounce = require('../utils/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _SearchBox = require('./SearchBox');

var _SearchBox2 = _interopRequireDefault(_SearchBox);

var _Suggestions = require('./Suggestions');

var _Suggestions2 = _interopRequireDefault(_Suggestions);

var _deepCopy = require('deep-copy');

var _deepCopy2 = _interopRequireDefault(_deepCopy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AutoComplete = function (_Component) {
  _inherits(AutoComplete, _Component);

  function AutoComplete(props) {
    _classCallCheck(this, AutoComplete);

    var _this = _possibleConstructorReturn(this, (AutoComplete.__proto__ || Object.getPrototypeOf(AutoComplete)).call(this, props));

    _this.state = {
      multiSelected: [],
      query: '',
      results: props.showInitialResults ? props.list : [],
      selectedIndex: 0
    };

    (0, _autoBind2.default)(['onSelect', 'onKeyDown', 'getOptions', 'onResetClick', 'handleQueryChange', 'removeTag'], _this);

    _this.handleChange = (0, _debounce2.default)(_this.handleChange, props.debounce);
    if (!props.async) _this.fuse = new _fuse2.default(props.list, _this.getOptions());
    return _this;
  }

  _createClass(AutoComplete, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps, newState) {
      if (newProps.async || newProps.showInitialResults && !newState.query) {
        this.setState({ results: newProps.list || [] });
      }
    }
  }, {
    key: 'onSelect',
    value: function onSelect() {
      var _props = this.props,
          name = _props.name,
          onSelect = _props.onSelect;

      onSelect(name);
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      var _state = this.state,
          selectedIndex = _state.selectedIndex,
          results = _state.results;
      var _props2 = this.props,
          name = _props2.name,
          valueKey = _props2.valueKey,
          onSelect = _props2.onSelect,
          multiSelect = _props2.multiSelect;


      if (e.keyCode === 40 && selectedIndex < results.length - 1) {
        this.setState({
          selectedIndex: selectedIndex + 1
        });
      } else if (e.keyCode === 38 && selectedIndex > 0) {
        this.setState({
          selectedIndex: selectedIndex - 1
        });
      } else if (e.keyCode === 13) {
        if (multiSelect) {
          this.state.multiSelected.push(results[selectedIndex]);
        }

        if (multiSelect) {
          onSelect({
            action: 'added',
            changed: results[selectedIndex],
            name: name,
            value: this.state.multiSelected
          });
        } else if (results[selectedIndex]) {
          onSelect({
            name: name,
            value: results[selectedIndex]
          });
        }

        this.setState({
          query: multiSelect ? '' : results[selectedIndex][valueKey],
          results: [],
          selectedIndex: 0
        });
      }
    }
  }, {
    key: 'onResetClick',
    value: function onResetClick() {
      this.setState({ query: '' });
      if (!this.props.showInitialResults) this.setState({ results: [] });
    }
  }, {
    key: 'getOptions',
    value: function getOptions() {
      return _extends({}, this.props.fuzzyOptions, { keys: this.props.keys });
    }
  }, {
    key: 'getSuggestions',
    value: function getSuggestions() {
      var resultsTemplate = this.props.resultsTemplate;
      var _state2 = this.state,
          results = _state2.results,
          selectedIndex = _state2.selectedIndex;

      if (results && results.length) {
        return _react2.default.createElement(_Suggestions2.default, {
          results: results,
          resultsTemplate: resultsTemplate,
          selectedIndex: selectedIndex
        });
      }
      return null;
    }
  }, {
    key: 'removeTag',
    value: function removeTag(_ref) {
      var _this2 = this;

      var id = _ref.id;

      var changed = this.state.multiSelected[id];
      var multiSelected = (0, _deepCopy2.default)(this.state.multiSelected);
      multiSelected.splice(id, 1);
      this.setState({ multiSelected: multiSelected }, function () {
        return _this2.props.onSelect({
          action: 'removed',
          changed: changed,
          name: _this2.props.name,
          value: _this2.state.multiSelected
        });
      });
    }
  }, {
    key: 'handleQueryChange',
    value: function handleQueryChange(query) {
      if (!this.props.async) {
        this.setState({
          query: query,
          results: this.props.showInitialResults && !query ? this.props.list : this.fuse.search(query)
        });
      }

      if (typeof this.props.onChange === 'function') {
        this.setState({
          query: query,
          results: this.props.onChange(query, this.props, this)
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          name = _props3.name,
          disabled = _props3.disabled,
          placeholder = _props3.placeholder,
          onFocus = _props3.onFocus,
          onBlur = _props3.onBlur,
          Reset = _props3.Reset,
          multiSelect = _props3.multiSelect,
          showTagRemove = _props3.showTagRemove,
          valueKey = _props3.valueKey;


      var mainClass = (0, _classnames2.default)('react-filters', 'rf-autocomplete', name, {
        disabled: disabled
      });

      return _react2.default.createElement(
        'div',
        { className: mainClass, onKeyDown: this.onKeyDown },
        _react2.default.createElement(_SearchBox2.default, {
          Reset: Reset,
          disabled: disabled,
          multiSelect: multiSelect,
          multiSelected: this.state.multiSelected,
          onBlur: onBlur,
          onFocus: onFocus,
          onQueryChange: this.handleQueryChange,
          onReset: this.onResetClick,
          onTagRemove: this.removeTag,
          placeholder: placeholder,
          showTagRemove: showTagRemove,
          value: this.state.query,
          valueKey: valueKey
        }),
        this.getSuggestions()
      );
    }
  }]);

  return AutoComplete;
}(_react.Component);

exports.default = AutoComplete;


AutoComplete.propTypes = {
  Reset: _react.PropTypes.func,
  async: _react.PropTypes.bool,
  className: _react.PropTypes.string,
  debounce: _react.PropTypes.number,
  disabled: _react.PropTypes.bool,
  list: _react.PropTypes.array,
  multiSelect: _react.PropTypes.bool,
  name: _react.PropTypes.string.isRequired,
  onBlur: _react.PropTypes.func,
  onChange: _react.PropTypes.func,
  onFocus: _react.PropTypes.func,
  onSelect: _react.PropTypes.func.isRequired,
  placeholder: _react.PropTypes.string,
  resultsTemplate: _react.PropTypes.func,
  showInitialResults: _react.PropTypes.bool,
  showTagRemove: _react.PropTypes.bool,
  valueKey: _react.PropTypes.string,
  width: _react.PropTypes.number,
  fuzzyOptions: _react.PropTypes.shape({
    caseSensitive: _react.PropTypes.bool,
    id: _react.PropTypes.string,
    include: _react.PropTypes.array,
    keys: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.string]),
    shouldSort: _react.PropTypes.bool,
    sortFn: _react.PropTypes.func,
    tokenize: _react.PropTypes.bool,
    verbose: _react.PropTypes.bool,
    maxPatternLength: _react.PropTypes.number,
    distance: _react.PropTypes.number,
    threshold: _react.PropTypes.number,
    location: _react.PropTypes.number
  })
};

AutoComplete.defaultProps = {
  async: false,
  debounce: 250,
  disabled: false,
  multiSelect: false,
  placeholder: 'Search',
  resultsTemplate: _Suggestions2.default.defaultResultsTemplate,
  showInitialResults: false,
  showTagRemove: true,
  tags: false,
  valueKey: 'title',
  width: 430,
  fuzzyOptions: {
    caseSensitive: false,
    shouldSort: true,
    sortFn: function sortFn(a, b) {
      return a.score - b.score;
    },

    threshold: 0.6,
    tokenize: false,
    verbose: false,
    distance: 100,
    include: [],
    location: 0
  }
};