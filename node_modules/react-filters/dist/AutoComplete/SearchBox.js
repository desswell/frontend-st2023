'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Tag = require('./Tag');

var _Tag2 = _interopRequireDefault(_Tag);

var _autoBind = require('../utils/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchBox = function (_Component) {
  _inherits(SearchBox, _Component);

  function SearchBox(props) {
    _classCallCheck(this, SearchBox);

    var _this = _possibleConstructorReturn(this, (SearchBox.__proto__ || Object.getPrototypeOf(SearchBox)).call(this, props));

    (0, _autoBind2.default)(['handleQueryChange', 'removeLastTag'], _this);
    return _this;
  }

  _createClass(SearchBox, [{
    key: 'getTags',
    value: function getTags() {
      var _this2 = this;

      return this.props.multiSelected.map(function (val, i) {
        return _react2.default.createElement(_Tag2.default, {
          id: i,
          onRemove: _this2.props.onTagRemove,
          showRemove: _this2.props.showTagRemove,
          text: val[_this2.props.valueKey]
        });
      });
    }
  }, {
    key: 'getTagContainer',
    value: function getTagContainer() {
      var _props = this.props,
          multiSelect = _props.multiSelect,
          multiSelected = _props.multiSelected;

      if (multiSelect && multiSelected && multiSelected.length) {
        return _react2.default.createElement(
          'div',
          { className: 'ac-tag-wrapper', ref: 'tagWrapper' },
          this.getTags()
        );
      }
      return null;
    }
  }, {
    key: 'handleQueryChange',
    value: function handleQueryChange() {
      this.props.onQueryChange(this.refs.autocomplete.value);
    }
  }, {
    key: 'removeLastTag',
    value: function removeLastTag(e) {
      var _props2 = this.props,
          onTagRemove = _props2.onTagRemove,
          multiSelected = _props2.multiSelected;

      var keyCode = e.which || e.keyCode;
      if (keyCode === 8 && multiSelected && multiSelected.length && !this.props.value.length) {
        e.preventDefault();
        e.stopPropagation();
        onTagRemove({
          id: multiSelected.length - 1
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          onFocus = _props3.onFocus,
          onBlur = _props3.onBlur,
          disabled = _props3.disabled,
          placeholder = _props3.placeholder,
          value = _props3.value,
          Reset = _props3.Reset,
          onReset = _props3.onReset,
          multiSelect = _props3.multiSelect;


      var mainClass = (0, _classnames2.default)('ac-searchbox', {
        tags: multiSelect
      });

      return _react2.default.createElement(
        'div',
        { className: mainClass },
        _react2.default.createElement(
          'span',
          null,
          this.getTagContainer()
        ),
        _react2.default.createElement('input', {
          className: 'ac-searchbox-input',
          disabled: disabled,
          onBlur: onBlur,
          onChange: this.handleQueryChange,
          onFocus: onFocus,
          onKeyDown: this.removeLastTag,
          placeholder: placeholder,
          ref: 'autocomplete',
          type: 'text',
          value: value
        }),
        _react2.default.createElement(
          'span',
          {
            className: 'ac-reset',
            onClick: onReset
          },
          value.length > 0 && _react2.default.createElement(Reset, null)
        )
      );
    }
  }]);

  return SearchBox;
}(_react.Component);

exports.default = SearchBox;


function noop() {}

SearchBox.propTypes = {
  Reset: _react.PropTypes.element.isRequired,
  disabled: _react.PropTypes.bool,
  multiSelect: _react.PropTypes.bool,
  multiSelected: _react.PropTypes.array,
  onBlur: _react.PropTypes.func,
  onFocus: _react.PropTypes.func,
  onQueryChange: _react.PropTypes.func.isRequired,
  onReset: _react.PropTypes.func,
  onTagRemove: _react.PropTypes.func,
  placeholder: _react.PropTypes.string,
  showTagRemove: _react.PropTypes.bool,
  value: _react.PropTypes.string.isRequired,
  valueKey: _react.PropTypes.string
};

function ResetContent() {
  return _react2.default.createElement('i', { className: 'icon-cancel' });
}

SearchBox.defaultProps = {
  Reset: ResetContent,
  onBlur: noop,
  onFocus: noop,
  placeholder: 'Search'
};