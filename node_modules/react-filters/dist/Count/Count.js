'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autoBind = require('../utils/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function inRange(value, min, max) {
  return value >= min && value <= max;
}

var Count = function (_Component) {
  _inherits(Count, _Component);

  function Count(props) {
    _classCallCheck(this, Count);

    var _this = _possibleConstructorReturn(this, (Count.__proto__ || Object.getPrototypeOf(Count)).call(this, props));

    (0, _autoBind2.default)(['handleIncrement', 'handleDecrement', 'onChange'], _this);
    return _this;
  }

  _createClass(Count, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(newProps) {
      var value = newProps.value,
          min = newProps.min,
          max = newProps.max;

      return inRange(value, min, max) && value !== this.props.value;
    }
  }, {
    key: 'onChange',
    value: function onChange(value, action) {
      var _props = this.props,
          name = _props.name,
          onChange = _props.onChange,
          min = _props.min,
          max = _props.max;


      if (inRange(value, min, max)) {
        onChange({
          action: action,
          name: name,
          value: value
        });
      }
    }
  }, {
    key: 'handleDecrement',
    value: function handleDecrement() {
      this.onChange(this.props.value - this.props.step, 'decreased');
    }
  }, {
    key: 'handleIncrement',
    value: function handleIncrement() {
      this.onChange(this.props.value + this.props.step, 'increased');
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          name = _props2.name,
          disabled = _props2.disabled,
          value = _props2.value,
          prefix = _props2.prefix,
          suffix = _props2.suffix,
          decrementElement = _props2.decrementElement,
          incrementElement = _props2.incrementElement;


      var mainClass = (0, _classnames2.default)('react-filters', 'rf-count', name, { disabled: disabled });
      return _react2.default.createElement(
        'div',
        { className: mainClass },
        _react2.default.createElement(
          'div',
          {
            className: 'count-button-wrapper cb-lower',
            onClick: !disabled && this.handleDecrement
          },
          decrementElement(this.props)
        ),
        _react2.default.createElement(
          'div',
          { className: 'count-value' },
          _react2.default.createElement(
            'span',
            { className: 'count-prefix' },
            prefix
          ),
          value,
          _react2.default.createElement(
            'span',
            { className: 'count-suffix' },
            suffix
          )
        ),
        _react2.default.createElement(
          'div',
          {
            className: 'count-button-wrapper cb-upper',
            onClick: !disabled && this.handleIncrement
          },
          incrementElement(this.props)
        )
      );
    }
  }]);

  return Count;
}(_react.Component);

exports.default = Count;


Count.propTypes = {
  decrementElement: _react.PropTypes.func,
  disabled: _react.PropTypes.bool,
  incrementElement: _react.PropTypes.func,
  max: _react.PropTypes.number,
  min: _react.PropTypes.number,
  name: _react.PropTypes.string.isRequired,
  onChange: _react.PropTypes.func.isRequired,
  prefix: _react.PropTypes.string,
  step: _react.PropTypes.number,
  suffix: _react.PropTypes.string,
  value: _react.PropTypes.number
};

Count.defaultProps = {
  decrementElement: function decrementElement() {
    return _react2.default.createElement(
      'button',
      { className: 'count-button' },
      _react2.default.createElement('i', { className: 'icon-remove' })
    );
  },

  disabled: false,
  incrementElement: function incrementElement() {
    return _react2.default.createElement(
      'button',
      { className: 'count-button' },
      _react2.default.createElement('i', { className: 'icon-add' })
    );
  },

  max: Number.POSITIVE_INFINITY,
  min: Number.NEGATIVE_INFINITY,
  step: 1,
  value: 0
};